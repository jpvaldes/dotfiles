;; -*- mode: emacs-lisp -*-
;; This file is loaded by Spacemacs at startup.
;; It must be stored in your home directory.

;; Configuration Layers
;; --------------------

(setq-default
 ;; List of additional paths where to look for configuration layers.
 ;; Paths must have a trailing slash (ie. `~/.mycontribs/')
 dotspacemacs-configuration-layer-path '()
 ;; List of configuration layers to load. If it is the symbol `all' instead
 ;; of a list then all discovered layers will be installed.
 dotspacemacs-configuration-layers '(python
                                     better-defaults
                                     (auto-completion :variables
                                                      auto-completion-use-tab-instead-of-enter t
                                                      auto-completion-enable-company-help-tooltip nil)
                                     auctex
                                     c-c++
                                     html
                                     markdown
                                     syntax-checking
                                     org
                                     (git :variables
                                          git-gutter-use-fringe t)
                                     themes-megapack
                                     ;; osx
                                     evil-commentary
                                     )
 ;; A list of packages and/or extensions that will not be install and loaded.
 dotspacemacs-excluded-packages '()
 ;; If non-nil spacemacs will delete any orphan packages, i.e. packages that
 ;; are declared in a layer which is not a member of
 ;; the list `dotspacemacs-configuration-layers'
 dotspacemacs-delete-orhpan-packages t
)

;; Settings
;; --------

(setq-default
 ;; Either `vim' or `emacs'. Evil is always enabled but if the variable
 ;; is `emacs' then the `holy-mode' is enabled at startup.
 dotspacemacs-editing-style 'vim
 ;; If non nil output loading progess in `*Messages*' buffer.
 dotspacemacs-verbose-loading nil
 ;; Specify the startup banner. Default value is `official', it displays
 ;; the official spacemacs logo. An integer value is the index of text
 ;; banner, `random' chooses a random text banner in `core/banners'
 ;; directory. A string value must be a path to a .PNG file.
 ;; If the value is nil then no banner is displayed.
 ;; dotspacemacs-startup-banner 'official
 dotspacemacs-startup-banner 'official
 ;; t if you always want to see the changelog at startup
 dotspacemacs-always-show-changelog t
 ;; List of items to show in the startup buffer. If nil it is disabled.
 ;; Possible values are: `recents' `bookmarks' `projects'."
 dotspacemacs-startup-lists '(recents projects)
 ;; List of themes, the first of the list is loaded when spacemacs starts.
 ;; Press <SPC> T n to cycle to the next theme in the list (works great
 ;; with 2 themes variants, one dark and one light)
 dotspacemacs-themes '(monokai
                       solarized-light
                       solarized-dark
                       leuven
                       zenburn)
 ;; If non nil the cursor color matches the state color.
 dotspacemacs-colorize-cursor-according-to-state t
 ;; Default font. `powerline-scale' allows to quickly tweak the mode-line
 ;; size to make separators look not too crappy.
 dotspacemacs-default-font '("Source Code Pro"
                             :size 14
                             :weight normal
                             :width normal
                             :powerline-scale 1.1)
 ;; The leader key
 dotspacemacs-leader-key "SPC"
 ;; Major mode leader key is a shortcut key which is the equivalent of
 ;; pressing `<leader> m`
 dotspacemacs-major-mode-leader-key ","
 ;; The command key used for Evil commands (ex-commands) and
 ;; Emacs commands (M-x).
 ;; By default the command key is `:' so ex-commands are executed like in Vim
 ;; with `:' and Emacs commands are executed with `<leader> :'.
 dotspacemacs-command-key ":"
 ;; If non nil the paste micro-state is enabled. While enabled pressing `p`
 ;; several times cycle between the kill ring content.
 dotspacemacs-enable-paste-micro-state t
 ;; Guide-key delay in seconds. The Guide-key is the popup buffer listing
 ;; the commands bound to the current keystrokes.
 dotspacemacs-guide-key-delay 0.4
 ;; If non nil a progress bar is displayed when spacemacs is loading. This
 ;; may increase the boot time on some systems and emacs builds, set it to
 ;; nil ;; to boost the loading time.
 dotspacemacs-loading-progress-bar t
 ;; Enable micro-state for helm buffer when pressing on TAB."
 dotspacemacs-helm-micro-state t
 ;; If non nil the frame is fullscreen when Emacs starts up (Emacs 24.4+ only).
 dotspacemacs-fullscreen-at-startup nil
 ;; If non nil `spacemacs/toggle-fullscreen' will not use native fullscreen.
 ;; Use to disable fullscreen animations in OSX."
 dotspacemacs-fullscreen-use-non-native nil
 ;; If non nil the frame is maximized when Emacs starts up (Emacs 24.4+ only).
 ;; Takes effect only if `dotspacemacs-fullscreen-at-startup' is nil.
 dotspacemacs-maximized-at-startup nil
 ;; A value from the range (0..100), in increasing opacity, which describes the
 ;; transparency level of a frame when it's active or selected. Transparency can
 ;; be toggled through `toggle-transparency'.
 dotspacemacs-active-transparency 90
 ;; A value from the range (0..100), in increasing opacity, which describes the
 ;; transparency level of a frame when it's inactive or deselected. Transparency
 ;; can be toggled through `toggle-transparency'.
 dotspacemacs-inactive-transparency 90
 ;; If non nil unicode symbols are displayed in the mode line (e.g. for lighters)
 dotspacemacs-mode-line-unicode-symbols t
 ;; If non nil smooth scrolling (native-scrolling) is enabled. Smooth scrolling
 ;; overrides the default behavior of Emacs which recenters the point when
 ;; it reaches the top or bottom of the screen
 dotspacemacs-smooth-scrolling t
 ;; If non-nil smartparens-strict-mode will be enabled in programming modes.
 dotspacemacs-smartparens-strict-mode nil
 ;; If non nil advises quit functions to keep server open when quitting.
 dotspacemacs-persistent-server nil
 ;; The default package repository used if no explicit repository has been
 ;; specified with an installed package.
 ;; Not used for now.
 dotspacemacs-default-package-repository nil
 )

;; Initialization Hooks
;; --------------------

(defun dotspacemacs/init ()
  "User initialization for Spacemacs. This function is called at the very
 startup."
  )

(defun dotspacemacs/config ()
  "This is were you can ultimately override default Spacemacs configuration.
 This function is called at the very end of Spacemacs initialization."
  (setq-default org-agenda-files '("~/Documents/org")
                initial-frame-alist '((top . 0)
                                      (left . 0)
                                      (width . 120)
                                      (height . 60))
                )
  ;;; Sane calendar defaults: dd/mm/yyyy :)
  (defvar calendar-date-style 'european)
  ;; Powerline separator
  (setq powerline-default-separator 'nil)
  ;; Alt doesn';TODO:  work in Mac OS X to type other characters
  ;; Tell emacs to delete with the delete key and that the left-Alt
  ;; is meta while the right is a modifier (AltGr)
  (when (eq system-type 'darwin)
    (message "Fine tuning for Mac OS X")
    (progn
      (global-set-key [kp-delete] 'delete-char))
    (setq-default ns-right-alternate-modifier nil)
    ;; (setq mac-right-option-modifier nil)
    ;; (setq-default mac-option-key-is-meta t)
    ;; (setq-default mac-right-option-modifier nil)
    ;;(setq url-proxy-services
    ;;      '(("no_proxy" . "^\\(localhost\\|10.*\\)")
    ;;        ("http" . "149.203.231.111:4711")
    ;;        ("https" . "149.203.231.111:4711")))
    )
  (when (eq system-type 'windows-nt)
    (message "Setting up cygwin")
    (defvar cygwin-bin-dir
      "C:/Cygwin64/bin/"
      "*Directory with cygwin binaries.")
    (setenv "PATH" (concat cygwin-bin-dir ";" (getenv "PATH")))
    )
    ;; No dialog pop-up when asking yes or no
  (setq-default use-dialog-box nil)
  ;; Company mode friendlier keybindings for me
  (eval-after-load 'company
    '(progn
       (define-key company-active-map (kbd "C-n") 'company-select-next)
       (define-key company-active-map (kbd "C-p") 'company-select-previous)
       ;; (define-key company-active-map (kbd "C-j") 'company-complete-common)
       ;; (define-key company-active-map (kbd "TAB") 'company-select-next)
       ;; (define-key company-active-map [tab] 'company-select-next)
       ;; (define-key company-active-map [S-tab] 'company-select-previous)
       ;; Company mode: complete files path
       (add-to-list 'company-backends 'company-files)
       ))
  (add-hook 'markdown-mode-hook
            (lambda ()
              (progn
                ('turn-on-auto-fill)
                ('linum-mode)))
            )
  ;; Set auto-fill for text and others modes
  (add-hook 'text-mode-hook 'turn-on-auto-fill)
  (add-hook 'org-mode-hook 'turn-on-auto-fill)
  (add-hook 'LaTeX-mode-hook
            (lambda ()
              (progn
                ('turn-on-auto-fill)
                ('LaTeX-math-mode)
                ('turn-on-reftex)))
            )
  (add-hook 'prog-mode-hook 'linum-mode)
  ;; Some more auctex options
  (setq TeX-auto-save t)
  (setq TeX-parse-self t)
  (setq reftex-plug-into-AUCTeX t)
  (setq TeX-PDF-mode t)
  ;; make latexmak compilation available
  (add-hook 'LaTeX-mode-hook
            (lambda ()
              (push
               '("latexmk" "latexmk -pdf -shell-escape %s" TeX-run-TeX nil t
                 :help "Run latexmk on file")
               TeX-command-list)))
  (add-hook 'TeX-mode-hook '(lambda ()
                              (setq TeX-command-default "latexmk"))
            )
  ;; also Xelatex
  (add-hook 'LaTeX-mode-hook
            (lambda ()
              (push
               '("latexmk-xelatex" "latexmk -xelatex -shell-escape %s" TeX-run-TeX nil t
                 :help "Run latexmk on file using XeLaTeX")
               TeX-command-list)))
  ;; Use skim as viewer and set it up with sync
  ;; Should allow to bounce forth and back between editor and viewer
  (setq TeX-view-program-selection '((output-pdf "Skim")))
  (setq TeX-view-program-list
        '(("Skim" "/Applications/Skim.app/Contents/SharedSupport/displayline -b -g %n %o %b")))
  ;; ;; Some latex setup. Better as a layer. Commenting out.
  ;; (defun my-latex-mode-setup ()
  ;;   (setq-local company-backends
  ;;               (append '(company-math-symbols-latex company-latex-commands)
  ;;                       company-backends)))
  ;; (add-hook 'LaTeX-mode-hook 'my-latex-mode-setup)
  ;; (add-hook 'TeX-mode-hook 'my-latex-mode-setup)

  ;; Set-up koma article class for org mode
  (require 'ox-latex)
  (unless (boundp 'org-latex-classes)
    (setq org-latex-classes nil))
  (add-to-list 'org-latex-classes
               '("article"
                 "\\documentclass{article}"
                 ("\\section{%s}" . "\\section*{%s}")))
  (add-to-list 'org-latex-classes
               '("koma-article"
                 "\\documentclass{scrartcl}"
                 ("\\section{%s}" . "\\section*{%s}")
                 ("\\subsection{%s}" . "\\subsection*{%s}")
                 ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                 ("\\paragraph{%s}" . "\\paragraph*{%s}")
                 ("\\subparagraph{%s}@" . "\\subparagraph*{%s}")))
  ;; Previewing with refresh in auctex
  (add-hook 'doc-view-mode-hook 'auto-revert-mode)
  )

;; Custom variables
;; ----------------

;; Do not write anything in this section. This is where Emacs will
;; auto-generate custom variable definitions.
