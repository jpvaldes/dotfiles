;; -*- mode: dotspacemacs -*-
;; This file is loaded by Spacemacs at startup.
;; It must be stored in your home directory.

(defun dotspacemacs/layers ()
  "Configuration Layers declaration."
  (setq-default
   ;; List of additional paths where to look for configuration layers.
   ;; Paths must have a trailing slash (ie. `~/.mycontribs/')
   dotspacemacs-configuration-layer-path '()
   ;; List of configuration layers to load. If it is the symbol `all' instead
   ;; of a list then all discovered layers will be installed.
   dotspacemacs-configuration-layers
   '(
     ;; ----------------------------------------------------------------
     ;; Example of useful layers you may want to use right away.
     ;; Uncomment some layer names and press <SPC f e R> (Vim style) or
     ;; <M-m f e R> (Emacs style) to install them.
     ;; ----------------------------------------------------------------
     (auto-completion :variables
                      auto-completion-use-tab-instead-of-enter nil
                      auto-completion-enable-company-help-tooltip nil)
     better-defaults
     emacs-lisp
     git
     version-control
     markdown
     org
     shell
     syntax-checking
     python
     latex
     c-c++
     html
     lua
     csharp
     javascript
     shell-scripts
     ruby
     themes-megapack
     evil-commentary
     ess
     autopep8
     cdlatex
     ;; osx
     )
   ;; List of additional packages that will be installed wihout being
   ;; wrapped in a layer. If you need some configuration for these
   ;; packages then consider to create a layer, you can also put the
   ;; configuration in `dotspacemacs/config'.
   dotspacemacs-additional-packages '()
   ;; A list of packages and/or extensions that will not be install and loaded.
   dotspacemacs-excluded-packages '()
   ;; If non-nil spacemacs will delete any orphan packages, i.e. packages that
   ;; are declared in a layer which is not a member of
   ;; the list `dotspacemacs-configuration-layers'
   dotspacemacs-delete-orphan-packages t))

(defun dotspacemacs/init ()
  "Initialization function.
This function is called at the very startup of Spacemacs initialization
before layers configuration."
  ;; This setq-default sexp is an exhaustive list of all the supported
  ;; spacemacs settings.
  (setq-default
   ;; Either `vim' or `emacs'. Evil is always enabled but if the variable
   ;; is `emacs' then the `holy-mode' is enabled at startup.
   dotspacemacs-editing-style 'vim
   ;; If non nil output loading progress in `*Messages*' buffer.
   dotspacemacs-verbose-loading nil
   ;; Specify the startup banner. Default value is `official', it displays
   ;; the official spacemacs logo. An integer value is the index of text
   ;; banner, `random' chooses a random text banner in `core/banners'
   ;; directory. A string value must be a path to an image format supported
   ;; by your Emacs build.
   ;; If the value is nil then no banner is displayed.
   dotspacemacs-startup-banner 'official
   ;; List of items to show in the startup buffer. If nil it is disabled.
   ;; Possible values are: `recents' `bookmarks' `projects'."
   dotspacemacs-startup-lists '(recents projects)
   ;; List of themes, the first of the list is loaded when spacemacs starts.
   ;; Press <SPC> T n to cycle to the next theme in the list (works great
   ;; with 2 themes variants, one dark and one light)
   dotspacemacs-themes '(
                         sanityinc-tomorrow-eighties
                         leuven
                         misterioso
                         molokai
                         monokai
                         solarized-light
                         solarized-dark
                         ample
                         gruvbox
                         zenburn)
   ;; If non nil the cursor color matches the state color.
   dotspacemacs-colorize-cursor-according-to-state t
   ;; Default font. `powerline-scale' allows to quickly tweak the mode-line
   ;; size to make separators look not too crappy.
   dotspacemacs-default-font '("Source Code Pro"
                               :size 14
                               :weight normal
                               :width normal
                               :powerline-scale 1.1)
   ;; The leader key
   dotspacemacs-leader-key "SPC"
   ;; The leader key accessible in `emacs state' and `insert state'
   dotspacemacs-emacs-leader-key "M-m"
   ;; Major mode leader key is a shortcut key which is the equivalent of
   ;; pressing `<leader> m`. Set it to `nil` to disable it.
   dotspacemacs-major-mode-leader-key ","
   ;; Major mode leader key accessible in `emacs state' and `insert state'
   dotspacemacs-major-mode-emacs-leader-key "C-M-m"
   ;; The command key used for Evil commands (ex-commands) and
   ;; Emacs commands (M-x).
   ;; By default the command key is `:' so ex-commands are executed like in Vim
   ;; with `:' and Emacs commands are executed with `<leader> :'.
   dotspacemacs-command-key ":"
   ;; If non nil then `ido' replaces `helm' for some commands. For now only
   ;; `find-files' (SPC f f) is replaced.
   dotspacemacs-use-ido nil
   ;; If non nil the paste micro-state is enabled. When enabled pressing `p`
   ;; several times cycle between the kill ring content.
   dotspacemacs-enable-paste-micro-state t
   ;; Guide-key delay in seconds. The Guide-key is the popup buffer listing
   ;; the commands bound to the current keystrokes.
   dotspacemacs-guide-key-delay 0.4
   ;; If non nil a progress bar is displayed when spacemacs is loading. This
   ;; may increase the boot time on some systems and emacs builds, set it to
   ;; nil ;; to boost the loading time.
   dotspacemacs-loading-progress-bar t
   ;; If non nil the frame is fullscreen when Emacs starts up.
   ;; (Emacs 24.4+ only)
   dotspacemacs-fullscreen-at-startup nil
   ;; If non nil `spacemacs/toggle-fullscreen' will not use native fullscreen.
   ;; Use to disable fullscreen animations in OSX."
   dotspacemacs-fullscreen-use-non-native nil
   ;; If non nil the frame is maximized when Emacs starts up.
   ;; Takes effect only if `dotspacemacs-fullscreen-at-startup' is nil.
   ;; (Emacs 24.4+ only)
   dotspacemacs-maximized-at-startup nil
   ;; A value from the range (0..100), in increasing opacity, which describes
   ;; the transparency level of a frame when it's active or selected.
   ;; Transparency can be toggled through `toggle-transparency'.
   dotspacemacs-active-transparency 100
   ;; A value from the range (0..100), in increasing opacity, which describes
   ;; the transparency level of a frame when it's inactive or deselected.
   ;; Transparency can be toggled through `toggle-transparency'.
   dotspacemacs-inactive-transparency 90
   ;; If non nil unicode symbols are displayed in the mode line.
   dotspacemacs-mode-line-unicode-symbols t
   ;; If non nil smooth scrolling (native-scrolling) is enabled. Smooth
   ;; scrolling overrides the default behavior of Emacs which recenters the
   ;; point when it reaches the top or bottom of the screen.
   dotspacemacs-smooth-scrolling t
   ;; If non-nil smartparens-strict-mode will be enabled in programming modes.
   dotspacemacs-smartparens-strict-mode nil
   ;; Select a scope to highlight delimiters. Possible value is `all',
   ;; `current' or `nil'. Default is `all'
   dotspacemacs-highlight-delimiters 'all
   ;; If non nil advises quit functions to keep server open when quitting.
   dotspacemacs-persistent-server nil
   ;; List of search tool executable names. Spacemacs uses the first installed
   ;; tool of the list. Supported tools are `ag', `pt', `ack' and `grep'.
   dotspacemacs-search-tools '("ag" "pt" "ack" "grep")
   ;; The default package repository used if no explicit repository has been
   ;; specified with an installed package.
   ;; Not used for now.
   dotspacemacs-default-package-repository nil
   )
  ;; User initialization goes here
  )

(defun dotspacemacs/user-config ()
  "Configuration function.
 This function is called at the very end of Spacemacs initialization after
layers configuration."
  (setq-default org-agenda-files '("~/Documents/org")
                initial-frame-alist '((top . 0)
                                      (left . 0)
                                      (width . 130)
                                      (height . 60))
                )
  ;;; Sane calendar defaults: dd/mm/yyyy :)
  (defvar calendar-date-style 'european)
  ;;; diff-hl
  (setq diff-hl-side 'left)
  ;; Powerline separator
  (setq powerline-default-separator 'nil)
  ;; Alt doesn';TODO:  work in Mac OS X to type other characters
  ;; Tell emacs to delete with the delete key and that the left-Alt
  ;; is meta while the right is a modifier (AltGr)
  (when (eq system-type 'darwin)
    (message "Fine tuning for Mac OS X")
    (progn
      (global-set-key [kp-delete] 'delete-char))
    (setq-default ns-right-alternate-modifier nil)
    ;; (setq mac-right-option-modifier nil)
    ;; (setq-default mac-option-key-is-meta t)
    ;; (setq-default mac-right-option-modifier nil)
    ;;(setq url-proxy-services
    ;;      '(("no_proxy" . "^\\(localhost\\|10.*\\)")
    ;;        ("http" . "149.203.231.111:4711")
    ;;        ("https" . "149.203.231.111:4711")))
    ;; mac switch meta key
    (defun mac-switch-meta nil
      "Switch meta between Option and Command. This is for
emacs-mac port.  The cocoa emacs uses ns- prefixed keys. When
using this function, do command-x instead of alt-x, for example."
      (interactive)
      (if (eq mac-option-modifier nil)
          (progn
            (setq mac-option-modifier 'meta)
            (setq mac-command-modifier 'hyper) )
        (progn
          (setq mac-option-modifier nil)
          (setq mac-command-modifier 'meta)
          )
        )
      )
    )
  (when (eq system-type 'windows-nt)
    (message "Setting up cygwin")
    (defvar cygwin-bin-dir
      "C:/Cygwin64/bin/"
      "*Directory with cygwin binaries.")
    (setenv "PATH" (concat cygwin-bin-dir ";" (getenv "PATH")))
    )
  ;; No dialog pop-up when asking yes or no
  (setq-default use-dialog-box nil)
  ;; Company mode friendlier keybindings for me
  (eval-after-load 'company
    '(progn
       (define-key company-active-map (kbd "C-n") 'company-select-next)
       (define-key company-active-map (kbd "C-p") 'company-select-previous)
       ;; (define-key company-active-map (kbd "C-j") 'company-complete-common-or-cycle)
       (define-key company-active-map (kbd "TAB") 'company-complete-common-or-cycle)
       (define-key company-active-map [tab] 'company-complete-common-or-cycle)
       (define-key company-active-map [S-tab] 'company-select-previous)
       ;; Company mode: complete files path
       ;; (add-to-list 'company-backends 'company-files)
       ;; (setq company-selection-wrap-around t)
       ))
  ;; python company-backends
  (setq company-backends-python-mode '((company-anaconda :with company-dabbrev-code
                                                         :with company-yasnippet)))
  ;; linum mode for programming
  (add-hook 'prog-mode-hook 'linum-mode)
  ;; auto fill and linum mode in markdown
  (add-hook 'markdown-mode-hook
            (lambda ()
              (progn
                ('turn-on-auto-fill)
                ('linum-mode)))
            )
  ;; Set auto-fill for text and others modes
  (add-hook 'text-mode-hook 'turn-on-auto-fill)
  (add-hook 'org-mode-hook 'turn-on-auto-fill)
  ;; math mode and reftex on in auctex
  ;; some issues with auto-completion layer
  ;; (add-hook 'LaTeX-mode-hook
  ;;           (lambda ()
  ;;             (progn
  ;;               ('turn-on-auto-fill)
  ;;               ('LaTeX-math-mode)
  ;;               ('turn-on-reftex)))
  ;;           )
  ;; Some more auctex options
  (setq TeX-auto-save t)
  (setq TeX-parse-self t)
  (setq reftex-plug-into-AUCTeX t)
  (setq TeX-PDF-mode t)
  (setq TeX-electric-sub-and-superscript t)
  ;; (setq LaTeX-math-mode t) ;; already set in auctex layer
  ;; make latexmak compilation available
  (add-hook 'LaTeX-mode-hook
            (lambda ()
              (push
               '("latexmk" "latexmk -pdf -shell-escape %s" TeX-run-TeX nil t
                 :help "Run latexmk on file")
               TeX-command-list)))
  (add-hook 'TeX-mode-hook '(lambda ()
                              (setq TeX-command-default "latexmk"))
            )
  ;; also Xelatex
  (add-hook 'LaTeX-mode-hook
            (lambda ()
              (push
               '("latexmk-xelatex" "latexmk -xelatex -shell-escape %s" TeX-run-TeX nil t
                 :help "Run latexmk on file using XeLaTeX")
               TeX-command-list)))
  ;; Use skim as viewer and set it up with sync
  ;; Should allow to bounce forth and back between editor and viewer
  ;; From skim, cmd+shift+click to go to text in emacs
  (setq TeX-view-program-selection '((output-pdf "Skim")))
  (setq TeX-view-program-list
        '(("Skim" "/Applications/Skim.app/Contents/SharedSupport/displayline -b -g %n %o %b")))
  ;; ;; Some latex setup. Better as a layer. Commenting out.
  ;; (defun my-latex-mode-setup ()
  ;;   (setq-local company-backends
  ;;               (append '(company-math-symbols-latex company-latex-commands)
  ;;                       company-backends)))
  ;; (add-hook 'LaTeX-mode-hook 'my-latex-mode-setup)
  ;; (add-hook 'TeX-mode-hook 'my-latex-mode-setup)

  ;; Set-up koma article class for org mode
  (require 'ox-latex)
  (unless (boundp 'org-latex-classes)
    (setq org-latex-classes nil))
  (add-to-list 'org-latex-classes
               '("article"
                 "\\documentclass{article}"
                 ("\\section{%s}" . "\\section*{%s}")))
  (add-to-list 'org-latex-classes
               '("koma-article"
                 "\\documentclass{scrartcl}"
                 ("\\section{%s}" . "\\section*{%s}")
                 ("\\subsection{%s}" . "\\subsection*{%s}")
                 ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                 ("\\paragraph{%s}" . "\\paragraph*{%s}")
                 ("\\subparagraph{%s}@" . "\\subparagraph*{%s}")))
  ;; Previewing with refresh in auctex
  ;; (add-hook 'doc-view-mode-hook 'auto-revert-mode)
  ;; Highlight colors when searching are awful by default
  (custom-set-faces '(evil-search-highlight-persist-highlight-face ((t (:background "selectedMenuItemColor")))))
  )


;; Do not write anything past this comment. This is where Emacs will
;; auto-generate custom variable definitions.
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(safe-local-variable-values (quote ((py-indent-offset . 4)))))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(company-tooltip-common ((t (:inherit company-tooltip :weight bold :underline nil))))
 '(company-tooltip-common-selection ((t (:inherit company-tooltip-selection :weight bold :underline nil))))
 '(evil-search-highlight-persist-highlight-face ((t (:background "selectedMenuItemColor")))))
