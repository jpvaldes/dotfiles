#Setting up the terminal

export CLICOLOR=1

export LSCOLORS=GxFxCxDxBxegedabagaced

alias ls='ls -GFh'
alias l='ls -GFh'
alias lf='ls -Fa'
alias la='ls -Fla'
alias lsize='ls -lrS' # Sort by size at the end
alias lx='ls -lXB' # Sort by extension
# alias ll="ls -lv --group-directories-first"
alias ll='ls -lv'
alias lm='ll |more'
alias tree='tree -Csuh'
alias du='du -kh'
alias df='df -kTh'
alias more='less'

## Readlink like in linux
## Install coreutils from homebrew first to make it work
command -v greadlink >/dev/null 2>&1 && alias readlink='greadlink -f'

## Emacs daemon
alias emd='/Applications/Emacs.app/Contents/MacOS/Emacs --daemon'
## Open Emacs client using existing frame
alias em='/usr/local/bin/emacsclient --no-wait'
## Open Emacs client using a new frame
# alias emn='/usr/local/bin/emacsclient -c --no-wait'
## Making emacs default editor
# export EDITOR=emacs
# export EDITOR='/usr/local/bin/emacsclient --no-wait'
## better aliases from ajschumacher
alias e='emacsclient -c --alternate-editor="" -nw'
alias eg='emacsclient -c --alternate-editor=""'
export EDITOR='emacsclient -c --alternate-editor="" -nw' 
export VISUAL=$EDITOR

## IPython notebook
NOTEDIR=$HOME/Documents/notebooks
alias ipnbs='ipython notebook --notebook-dir=$NOTEDIR --browser="safari"'
alias ipnb='ipython notebook --notebook-dir=$NOTEDIR --no-browser --port=7777'

## IPython console
alias ipc='ipython qtconsole --style=monokai'

## Get rid of the executable bit when copying from windows shares
## Change maxdepth > 1 to enter directories
alias losex='find . -maxdepth 3 -type f -exec chmod -x {} +'
## And the same when copying from someone that leaves
## 777 permissions to the directories
alias losew='find . -maxdepth 3 -type d -exec chmod 755 {} +'

## Make finder show/hide hidden files
alias hideFiles='defaults write com.apple.finder AppleShowAllFiles NO; killall Finder /System/Library/CoreServices/Finder.app'
alias showFiles='defaults write com.apple.finder AppleShowAllFiles YES; killall Finder /System/Library/CoreServices/Finder.app'

## By default, the number of max. open files for a terminal process
## is very low. Only 256. Increase that.
ulimit -n 65536
ulimit -u 2048

## Defining locales, sad...
export LC_ALL=de_DE.UTF-8
export LANG=$LC_ALL
export LC_CTYPE=$LC_ALL

## Proxy settings
# not needed anymore

# export HTTP_PROXY=http://149.203.231.111:4711
# export HTTPS_PROXY=http://149.203.231.111:4711
# export ALL_PROXY=http://149.203.231.111:4711
# export ftp_proxy=$ALL_PROXY
# git config --global http.proxy $HTTP_PROXY
# git config --global https.proxy http://149.203.231.111:4711

## or no proxy at all...
function noproxy {
    export HTTP_PROXY=""
    export HTTPS_PROXY=""
    export ALL_PROXY=""
    export ftp_proxy=""
    git config --global --unset http.proxy
    git config --global --unset https.proxy
}

## Disable shell warning of new mail
shopt -u mailwarn
unset MAILCHECK

# Color definitions (taken from Color Bash Prompt HowTo).
# Some colors might look different of some terminals.
# For example, I see 'Bold Red' as 'orange' on my screen,
# hence the 'Green' 'BRed' 'Red' sequence I often use in my prompt.


# Normal Colors
Black='\e[0;30m'        # Black
Red='\e[0;31m'          # Red
Green='\e[0;32m'        # Green
Yellow='\e[0;33m'       # Yellow
Blue='\e[0;34m'         # Blue
Purple='\e[0;35m'       # Purple
Cyan='\e[0;36m'         # Cyan
White='\e[0;37m'        # White

# Bold
BBlack='\e[1;30m'       # Black
BRed='\e[1;31m'         # Red
BGreen='\e[1;32m'       # Green
BYellow='\e[1;33m'      # Yellow
BBlue='\e[1;34m'        # Blue
BPurple='\e[1;35m'      # Purple
BCyan='\e[1;36m'        # Cyan
BWhite='\e[1;37m'       # White

# Background
On_Black='\e[40m'       # Black
On_Red='\e[41m'         # Red
On_Green='\e[42m'       # Green
On_Yellow='\e[43m'      # Yellow
On_Blue='\e[44m'        # Blue
On_Purple='\e[45m'      # Purple
On_Cyan='\e[46m'        # Cyan
On_White='\e[47m'       # White

NC="\e[m"               # Color Reset

#ALERT=${BWhite}${On_Red} # Bold White on red background

RESET="\[\017\]"
NORMAL="\[\033[0m\]"
YELLOW="\[\033[0;33m\]"
CYAN="\[\033[0;36m\]"
PURPLE="\[\033[0;35m\]"
GREEN="\[\033[0;32m\]"
BGREEN="\[\033[1;32m\]"
BYELLOW="\[\033[1;33m\]"
BCYAN="\[\033[1;36m\]"
BPURPLE="\[\033[1;35m\]"
BWHITE="\[\033[1;37m\]"
BBLACK="\[\033[1;30m\]"
ONRED="\[\033[41m\]"
ALERT=${BWHITE}${ONRED}

export PS1="$RESET \`if [ \$? = 0 ]; then echo ${PURPLE}; else echo ${ALERT}; fi\` [\!]$CYAN\u$GREEN@\h:$BYELLOW\w$NORMAL \$ "
set_prompt () {
    Last_Command=$? # Must come first!
    Blue='\[\e[01;34m\]'
    White='\[\e[01;37m\]'
    Red='\[\e[01;31m\]'
    Green='\[\e[01;32m\]'
    Reset='\[\e[00m\]'
    # to get the octal codes: echo â–¶|hexdump -b
    FancyX='\342\234\227'
    Checkmark='\342\234\223'
    ArrowPrompt='\342\226\266'
    HappySmiley='\342\230\272'

    PS1="$Reset"
    # Add a bright white exit status for the last command
    # PS1="$RESET$PURPLE[\!]"
    #PS1="$White\$? "
    # If it was successful, print a green check mark. Otherwise, print
    # a red X.
    # if [[ $Last_Command == 0 ]]; then
    #     PS1+="$Green$Checkmark "
    # else
    #     PS1="$ALERT[\!]$Reset"
    #     PS1+="$Red$FancyX "
    # fi
    # If root, just print the host in red. Otherwise, print the current user
    # and host in green.
    if [[ $EUID == 0 ]]; then
         PS1+="$Red\\h "
    else
         PS1+="$CYAN\\u$GREEN@\\h:"
    fi
    # Print the working directory and prompt marker in blue, and reset
    # the text color to the default.
    #PS1+="$Blue\\w \\\$$Reset "
    #PS1+="$BYELLOW\w$NORMAL \$ "
    # PS1+="$BYELLOW\w$NORMAL $Red$ArrowPrompt$Reset "
    PS1+="$BYELLOW\W$NORMAL $Red>$Reset "
}
PROMPT_COMMAND='set_prompt'
# Something interesting: to have different colors for text entry and default
# for console output
# trap 'echo -ne "\e[0m"' DEBUG
# PS1="\`if [ \$? = 0 ]; then echo \[\e[33m\]^_^\[\e[0m\]; else echo \[\e[31m\]O_O\[\e[0m\]; fi\`[\u@\h:\w]\\$ "
# export PS1="\[\033[36m\]\h@\u\[\033[m\]:\[\033[33;1m\]\w\[\033[m\]\$ "
# export PS1="\n${Cyan}\h@\u${NC}${BGreen}:${NC}${BYellow}\w${NC} \$ ${NC}"
#export PS1="\[\033[35m\][\!]\[\033[36m\]\u\[\033[32m\]@\h:\[\033[33;1m\]\w\[\033[m\]\$ "

# LESS man page colors (makes Man pages more readable).
export LESS_TERMCAP_mb=$'\E[01;31m'
export LESS_TERMCAP_md=$'\E[01;31m'
export LESS_TERMCAP_me=$'\E[0m'
export LESS_TERMCAP_se=$'\E[0m'
export LESS_TERMCAP_so=$'\E[01;44;33m'
export LESS_TERMCAP_ue=$'\E[0m'
export LESS_TERMCAP_us=$'\E[01;32m'

## Colors overview
colors() {
	local fgc bgc vals seq0

	printf "Color escapes are %s\n" '\e[${value};...;${value}m'
	printf "Values 30..37 are \e[33mforeground colors\e[m\n"
	printf "Values 40..47 are \e[43mbackground colors\e[m\n"
	printf "Value  1 gives a  \e[1mbold-faced look\e[m\n\n"

	# foreground colors
	for fgc in {30..37}; do
		# background colors
		for bgc in {40..47}; do
			fgc=${fgc#37} # white
			bgc=${bgc#40} # black

			vals="${fgc:+$fgc;}${bgc}"
			vals=${vals%%;}

			seq0="${vals:+\e[${vals}m}"
			printf "  %-9s" "${seq0:-(default)}"
			printf " ${seq0}TEXT\e[m"
			printf " \e[${vals:+${vals+$vals;}}1mBOLD\e[m"
		done
		echo; echo
	done
}

# Functions to grep source code files
# Blatantly copied from http://alexteichman.com/octo/blog/2013/12/08/quickly-navigating-large-repositories-from-the-terminal/
# and adapted to work fine in MacOS X
# Usage example to open a result from cgrep in $EDITOR: cgrep imread | yank 6
# Example to make a replace: sed -i 's/Name2/Name/g' `cfiles`
function cfiles {
    find . -regex '.*\.h$|.*\.hpp$|.*\.c$|.*\.cpp|.*\.cc$'
}

function cgrep {
   2>/dev/null grep -n "$@" $(cfiles) | nl | grep "$@"
}

function hfiles {
    find . -regex '.*\.h|.*\.hpp'
}

function hgrep {
    2>/dev/null grep -n "$@" $(hfiles) | nl | grep "$@"
}

function pyfiles {
    find . -regex '.*\.py$' | grep -v '#'
}

function pygrep {
   2>/dev/null grep -n "$@" $(pyfiles) | nl | grep "$@"
}

function yank {
    grep "^\s*$@\s" | awk '{print $2}' | sed 's/-\([0-9]*\)-/:\1:/g' | awk -F: '{print $1 " +" $2}' | awk '{print $2 " " $1}' | xargs ${EDITOR:?EDITOR must be set.}
}

##
# Your previous /Users/valdesj/.bash_profile file was backed up as /Users/valdesj/.bash_profile.macports-saved_2014-06-13_at_16:26:01
##

# MacPorts Installer addition on 2014-06-13_at_16:26:01: adding an appropriate PATH variable for use with MacPorts.
# export PATH=/opt/local/bin:/opt/local/sbin:$PATH
# Finished adapting your PATH environment variable for use with MacPorts.

## Stuff for homebrew, see
## http://hackercodex.com/guide/max-osx-mavericks-10.9-configuration/

# Architecture flags
#export ARCHFLAGS="-arch x86_64"
# Precedence for user binaries
export PATH=/usr/local/bin:/usr/local/sbin:$PATH
# Python path
export PYTHONPATH=/usr/local/lib/python2.7/site-packages/:$PYTHONPATH
# load .bashrc in case it exists
test -f ~/.bashrc && source ~/.bashrc

# Just installed bash_completion
if [ -f $(brew --prefix)/etc/bash_completion ]; then
    . $(brew --prefix)/etc/bash_completion
fi

# miniconda as alternative to homebrew's python
function pyconda {
    unset PYTHONPATH
}

function pybrew {
    export PYTHONPATH=/usr/local/lib/python2.7/site-packages/:$PYTHONPATH
}

# Completion for pyenv
# if which pyenv > /dev/null; then eval "$(pyenv init -)"; fi

# To use homebrew's dirs instead of pyenv:
# export PYENV_ROOT=/usr/local/opt/pyenv

# FSL Setup
FSLDIR=/usr/local/fsl
PATH=${FSLDIR}/bin:${PATH}
export FSLDIR PATH
. ${FSLDIR}/etc/fslconf/fsl.sh

# mricron
mricronpath=/usr/local/mricron
export PATH=$PATH:$mricronpath

# FreeSurfer (as requested in the documentation)
export FREESURFER_HOME=/Applications/freesurfer
source $FREESURFER_HOME/SetUpFreeSurfer.sh

# Matlab path
# export MATLABCMD=/Applications/MATLAB_R2013b.app/bin/maci64/MATLAB
export MATLABCMD=/Applications/MATLAB_R2013b.app/bin/matlab
echo "MATLAB PATH: $MATLABCMD"

echo "Adding ANTS to path:"
export ANTSPATH=$HOME/Source/external/ants-2.1.0/bin
echo "ANTSPATH: $ANTSPATH"
export PATH=$PATH:$ANTSPATH
echo

echo "Adding user's bin/ to path"
export PATH=$PATH:$HOME/bin
echo
